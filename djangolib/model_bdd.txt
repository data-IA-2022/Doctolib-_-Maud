# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)
    name = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthentificationMedecinpatient(models.Model):
    idmedecin = models.ForeignKey('AuthentificationUtilisateur', models.DO_NOTHING, db_column='idMedecin_id', blank=True, null=True)  # Field name made lowercase.
    idpatient = models.OneToOneField('AuthentificationUtilisateur', models.DO_NOTHING, db_column='idPatient_id', related_name='authentificationmedecinpatient_idpatient_set', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'authentification_medecinpatient'


class AuthentificationUtilisateur(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    role = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'authentification_utilisateur'


class AuthentificationUtilisateurGroups(models.Model):
    utilisateur = models.ForeignKey(AuthentificationUtilisateur, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authentification_utilisateur_groups'
        unique_together = (('utilisateur', 'group'),)


class AuthentificationUtilisateurUserPermissions(models.Model):
    utilisateur = models.ForeignKey(AuthentificationUtilisateur, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'authentification_utilisateur_user_permissions'
        unique_together = (('utilisateur', 'permission'),)


class ColSante(models.Model):
    user_id = models.CharField(primary_key=True, blank=True, null=True)  # The composite primary key (user_id, date) found, that is not supported. The first column is selected.
    date = models.TextField(blank=True, null=True)
    poids = models.IntegerField(blank=True, null=True)
    tour_de_taille_en_cm = models.IntegerField(blank=True, null=True)
    fréquence_cardiaque_par_minute = models.IntegerField(blank=True, null=True)
    tension_artérielle_systolique_prise_du_matin = models.IntegerField(blank=True, null=True)
    tension_artérielle_systolique_prise_du_soir = models.IntegerField(blank=True, null=True)
    tension_artérielle_diastolique_prise_du_matin = models.IntegerField(blank=True, null=True)
    tension_artérielle_diastolique_prise_du_soir = models.IntegerField(blank=True, null=True)
    symptomes_cardiovasculaires_en_quelques_mots = models.CharField(blank=True, null=True)
    nombre_de_médicaments_pris_dans_la_journée = models.IntegerField(blank=True, null=True)
    oubli_de_prendre_les_médicaments_le_matin = models.BooleanField(blank=True, null=True)
    oubli_de_prendre_les_médicaments_le_soir = models.BooleanField(blank=True, null=True)
    effets_secondaires_remarqués = models.BooleanField(blank=True, null=True)
    symptomes_particuliers_remarqués = models.BooleanField(blank=True, null=True)
    effets_secondaires_et_ou_symptomes_particuliers_en_quelques_mots = models.CharField(blank=True, null=True)
    consommation_dalcool = models.BooleanField(blank=True, null=True)
    grignotage_sucre = models.BooleanField(blank=True, null=True)
    grignotage_sale = models.BooleanField(blank=True, null=True)
    nombre_de_repas_pris_durant_la_journée = models.IntegerField(blank=True, null=True)
    quantité_deau_bue_en_litre = models.IntegerField(blank=True, null=True)
    quantité_dalcool_consommé_en_litre = models.IntegerField(blank=True, null=True)
    activité_physique_aujourdhui = models.BooleanField(blank=True, null=True)
    nature_de_votre_activité_physique = models.CharField(blank=True, null=True)
    durée_de_lactivité_physique_en_minutes = models.IntegerField(blank=True, null=True)
    présence_de_dyspnée = models.BooleanField(blank=True, null=True)
    présence_dœdème = models.BooleanField(blank=True, null=True)
    présence_dépisode_infectieux = models.BooleanField(blank=True, null=True)
    présence_de_fièvre = models.BooleanField(blank=True, null=True)
    présence_de_palpitation = models.BooleanField(blank=True, null=True)
    présence_de_douleur_thoracique = models.BooleanField(blank=True, null=True)
    présence_de_malaise = models.BooleanField(blank=True, null=True)
    heure_de_début_des_palpitations = models.TimeField(blank=True, null=True)
    durée_totale_des_palpitations_en_minutes = models.IntegerField(blank=True, null=True)
    heure_de_début_des_douleurs_thoraciques = models.TimeField(blank=True, null=True)
    durée_totale_des_douleurs_thoraciques_en_minutes = models.IntegerField(blank=True, null=True)
    heure_de_début_des_malaises = models.TimeField(blank=True, null=True)
    durée_totale_des_malaises_en_minutes = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'col_sante'


class ColStress(models.Model):
    user_id = models.CharField(primary_key=True, blank=True, null=True)  # The composite primary key (user_id, date) found, that is not supported. The first column is selected.
    date = models.TextField(blank=True, null=True)
    irritabilité = models.IntegerField(blank=True, null=True)
    sentiments_depressifs = models.IntegerField(blank=True, null=True)
    bouche_seche_ou_gorge_seche = models.IntegerField(blank=True, null=True)
    actions_ou_gestes_impulsifs = models.IntegerField(blank=True, null=True)
    grincement_des_dents = models.IntegerField(blank=True, null=True)
    difficulte_a_rester_assis = models.IntegerField(blank=True, null=True)
    cauchemars = models.IntegerField(blank=True, null=True)
    diarrhee = models.IntegerField(blank=True, null=True)
    attaques_verbales_envers_quelquun = models.IntegerField(blank=True, null=True)
    hauts_et_bas_emotifs = models.IntegerField(blank=True, null=True)
    grande_envie_de_pleurer = models.IntegerField(blank=True, null=True)
    grande_envie_de_fuir = models.IntegerField(blank=True, null=True)
    grande_envie_de_faire_mal = models.IntegerField(blank=True, null=True)
    pensees_embrouillees = models.IntegerField(blank=True, null=True)
    debit_plus_rapide = models.IntegerField(blank=True, null=True)
    fatigue_ou_lourdeur_generalisees = models.IntegerField(blank=True, null=True)
    sentiment_detre_surchargee = models.IntegerField(blank=True, null=True)
    sentiment_detre_emotivement_fragile = models.IntegerField(blank=True, null=True)
    sentiment_de_tristesse = models.IntegerField(blank=True, null=True)
    sentiment_danxiete = models.IntegerField(blank=True, null=True)
    tension_emotionnelle = models.IntegerField(blank=True, null=True)
    hostilite_envers_les_autres = models.IntegerField(blank=True, null=True)
    tremblements_ou_gestes_nerveux = models.IntegerField(blank=True, null=True)
    begaiements_ou_hesitations_verbales = models.IntegerField(blank=True, null=True)
    incapacite_ou_difficulte_a_se_concentrer = models.IntegerField(blank=True, null=True)
    difficulte_a_organiser_ses_pensees = models.IntegerField(blank=True, null=True)
    difficulte_a_dormir_toute_la_nuit_sans_se_reveiller = models.IntegerField(blank=True, null=True)
    besoin_frequent_duriner = models.IntegerField(blank=True, null=True)
    maux_destomac_ou_difficultes_a_digerer = models.IntegerField(blank=True, null=True)
    geste_ou_sentiment_dimpatience = models.IntegerField(blank=True, null=True)
    maux_de_tete = models.IntegerField(blank=True, null=True)
    douleurs_au_dos_ou_a_la_nuque = models.IntegerField(blank=True, null=True)
    perte_ou_gain_dappetit = models.IntegerField(blank=True, null=True)
    perte_dinteret_pour_le_sexe = models.IntegerField(blank=True, null=True)
    oublis_frequents = models.IntegerField(blank=True, null=True)
    douleurs_ou_serrements_a_la_poitrine = models.IntegerField(blank=True, null=True)
    conflits_significatifs_avec_les_autres = models.IntegerField(blank=True, null=True)
    difficultes_a_se_lever_apres_le_sommeil = models.IntegerField(blank=True, null=True)
    sentiment_que_les_choses_sont_hors_de_controle = models.IntegerField(blank=True, null=True)
    difficulte_a_faire_une_longue_activite_continue = models.IntegerField(blank=True, null=True)
    mouvements_de_retrait_disolement = models.IntegerField(blank=True, null=True)
    difficulte_a_sendormir = models.IntegerField(blank=True, null=True)
    difficulte_a_se_remettre_dun_evenement_contrariant = models.IntegerField(blank=True, null=True)
    mains_moites = models.IntegerField(blank=True, null=True)
    total_de_limpact_du_stress_dans_votre_vie_actuelle = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'col_stress'


class DjangoAdminLog(models.Model):
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthentificationUtilisateur, models.DO_NOTHING)
    action_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'
